set(EXTERNAL_DEPENDENCIES_DIR_NAME "MixedAnalysisExternalDependencies")
set(EXTERNAL_DEPENDENCIES_PATH "$ENV{HOME}/${EXTERNAL_DEPENDENCIES_DIR_NAME}")

message(STATUS "Setting up project dependencies. Working dir: ${EXTERNAL_DEPENDENCIES_PATH}")

file(MAKE_DIRECTORY ${EXTERNAL_DEPENDENCIES_PATH})

add_custom_target(${EXTERNAL_DEPENDENCIES_SRC_DIR})

macro(CHECK_EXTERNAL_COMPONENT NAME FOUND_OUT_VAR)
    file(GLOB FILES "${CMAKE_BINARY_DIR}/${NAME}/*")
    list(LENGTH FILES FILES_COUNT)
    if(${FILES_COUNT} GREATER 0)
        set("${FOUND_OUT_VAR}" TRUE)
    else()
        set("${FOUND_OUT_VAR}" FALSE)
    endif()
endmacro()

macro(SETUP_EXTERNAL_EXECUTABLE_COMPONENT NAME EXECUTABLE_NAME EXECUTABLE_PATH_OUT)
    message(STATUS "Processing ${NAME}")
    set(ALREADY_AVAILABLE)
    CHECK_EXTERNAL_COMPONENT("${NAME}" ALREADY_AVAILABLE)
    if (${ALREADY_AVAILABLE})
        message(STATUS "Found non-empty ${NAME}. Setup step skipped.")
    else()
        add_subdirectory("${EXTERNAL_DEPENDENCIES_SRC_DIR}/${NAME}")
        add_dependencies(${EXTERNAL_DEPENDENCIES_SRC_DIR} ${NAME})
    endif()

    find_program("${EXECUTABLE_PATH_OUT}" "${EXECUTABLE_NAME}" REQUIRED HINTS "${CMAKE_BINARY_DIR}/${NAME}/*")
    message(STATUS "Found ${NAME} executable at: ${${EXECUTABLE_PATH_OUT}}")
endmacro()

macro(SETUP_EXTERNAL_SHARED_LIB COMPONENT_NAME LIB_NAME)
    message(STATUS "Processing ${COMPONENT_NAME}")

    add_library(${COMPONENT_NAME} SHARED IMPORTED GLOBAL)

    set(ALREADY_AVAILABLE)
    CHECK_EXTERNAL_COMPONENT("${COMPONENT_NAME}" ALREADY_AVAILABLE)
    if (${ALREADY_AVAILABLE})
        message(STATUS "Found non-empty ${COMPONENT_NAME}. Skipping component.")
    else()
        add_subdirectory("${EXTERNAL_DEPENDENCIES_SRC_DIR}/${COMPONENT_NAME}")
        add_dependencies(${COMPONENT_NAME} "${COMPONENT_NAME}SetupLib")
        add_dependencies(${EXTERNAL_DEPENDENCIES_SRC_DIR} ${COMPONENT_NAME})
    endif()

    find_library(LIB_PATH "${LIB_NAME}" REQUIRED HINTS "${CMAKE_BINARY_DIR}/${COMPONENT_NAME}/*")
    message(${LIB_PATH})
    set_target_properties(${COMPONENT_NAME} PROPERTIES IMPORTED_LOCATION ${LIB_PATH})
endmacro()

set(CWE_CHECKER_COMPONENT_NAME "CweChecker")
SETUP_EXTERNAL_SHARED_LIB(${CWE_CHECKER_COMPONENT_NAME} "cwe_checker_lib")

set(CPP_CHECK_COMPONENT_NAME "CppCheck")
SETUP_EXTERNAL_EXECUTABLE_COMPONENT(${CPP_CHECK_COMPONENT_NAME} "cppcheck" CPP_CHECK_EXECUTABLE)

set(VALGRIND_COMPONENT_NAME "Valgrind")
SETUP_EXTERNAL_EXECUTABLE_COMPONENT(${VALGRIND_COMPONENT_NAME} "valgrind" VALGRIND_EXECUTABLE)

set(QT_COMPONENT_NAME "Qt5")
# NOTE: Use include instead of add_subdirectory to make Qt packages visible in the parent score.
include(${EXTERNAL_DEPENDENCIES_SRC_DIR}/${QT_COMPONENT_NAME}/CMakeLists.txt)

add_custom_command(TARGET ${EXTERNAL_DEPENDENCIES_SRC_DIR} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E rm -rf ${EXTERNAL_DEPENDENCIES_PATH})